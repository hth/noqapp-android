import groovy.xml.Namespace

apply plugin: 'com.android.application'
apply from: '../config/quality.gradle'

if (!hasProperty('env')) {
    env = System.env['GRADLE_ENV']
}

def buildNumber = System.getenv("BUILD_NUMBER") ?: "0"

def manifestVersionName() {
    def manifestFile = file(project.projectDir.absolutePath + '/src/main/AndroidManifest.xml')
    def ns = new Namespace("http://schemas.android.com/apk/res/android", "android")
    def xml = new XmlParser().parse(manifestFile)
    return xml.attributes()[ns.versionName].toString()
}

apply plugin: 'jacoco'

repositories {
}

jacoco {
    toolVersion = '0.8.5'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    archivesBaseName = "merchant"

    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    def versionPropsFile = file('version.properties')
    def versionMajor = 0
    def versionMinor = 0
    def versionPatch = 0

    if (versionPropsFile.canRead()) {
        if (env == "release" || env == "sandbox") {
            def Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionPropsFile))
            versionMajor = versionProps['VERSION_MAJOR'].toInteger()
            versionMinor = versionProps['VERSION_MINOR'].toInteger()
            versionPatch = versionProps['VERSION_PATCH'].toInteger()
        }
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    def versionBuildPropsFile = file('version.build.properties')
    def versionBuild = 1

    if (env == "release" || env == "sandbox") {
        if (versionBuildPropsFile.canRead()) {
            def Properties versionBuildProps = new Properties()
            versionBuildProps.load(new FileInputStream(versionBuildPropsFile))

            if (versionBuildProps['VERSION_MAJOR'].toInteger() != versionMajor ||
                    versionBuildProps['VERSION_MINOR'].toInteger() != versionMinor) {

                println "versionPatch: " + 0.toString() +
                        " versionBuild: " + versionBuildProps['VERSION_BUILD']
                versionBuild = versionBuildProps['VERSION_BUILD'].toInteger() + 1

                versionBuildProps['VERSION_MAJOR'] = versionMajor.toString()
                versionBuildProps['VERSION_MINOR'] = versionMinor.toString()
                versionBuildProps['VERSION_PATCH'] = versionPatch.toString()
                versionBuildProps['VERSION_BUILD'] = versionBuild.toString()
                versionBuildProps.store(versionBuildPropsFile.newWriter(), null)
            } else {
                println "versionPatch: " + versionBuildProps['VERSION_PATCH'] +
                        " versionBuild: " + versionBuildProps['VERSION_BUILD']
                versionBuild = versionBuildProps['VERSION_BUILD'].toInteger() + 1
                versionPatch = versionBuildProps['VERSION_PATCH'].toInteger() + 1

                versionBuildProps['VERSION_MAJOR'] = versionMajor.toString()
                versionBuildProps['VERSION_MINOR'] = versionMinor.toString()
                versionBuildProps['VERSION_BUILD'] = versionBuild.toString()
                versionBuildProps['VERSION_PATCH'] = versionPatch.toString()
                versionBuildProps.store(versionBuildPropsFile.newWriter(), null)
            }
        } else {
            throw new FileNotFoundException("Could not read version.build.properties!")
        }
    }

    buildFeatures {
        viewBinding true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        applicationId "com.noqapp.android.merchant"
        minSdkVersion 22
        targetSdkVersion 30
        multiDexEnabled true
        testHandleProfiling true
        testFunctionalTest true
        versionCode versionBuild
        versionName versionMajor + "." + versionMinor + "." + versionPatch
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // For now we enable strict mode for all the configs
        buildConfigField 'boolean', 'STRICT_MODE', 'true'
        buildConfigField "String", "BUILD", "\"$buildNumber\""

        if (env == 'debug' || env == "sandbox" || env == 'release') {
            apkName = "-" + versionMajor + "." + versionMinor + "." + versionPatch + "." + versionBuild + "-" + buildNumber + ".apk"
        }

        ext.versionName = manifestVersionName()
        println "Building NoQueue for " +
                "environment: $env " +
                "app-version: $versionName " +
                "apkName ends with : $apkName"

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                output.outputFileName = new File(
                        "../",
                        output.outputFile.name.replace(".apk", "$apkName"))
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    signingConfigs {
        sandbox
        release
    }
    apply from: 'noqapp-signing/signing.gradle'

    buildTypes {
        def BOOLEAN = "boolean"
        def STRING = "String"
        def TRUE = "true"
        def FALSE = "false"
        def LOG_HTTP_REQUESTS = "LOG_HTTP_REQUESTS"
        def REPORT_CRASHES = "REPORT_CRASHES"
        def ENABLE_VIEW_SERVER = "ENABLE_VIEW_SERVER"
        def ENABLE_SHARING = "ENABLE_SHARING"
        def DEBUG_IMAGES = "DEBUG_IMAGES"

        debug {
            debuggable true
            //when minifyEnabled is true gets exception com.android.dx.cf.code.SimException:
            minifyEnabled false

            testCoverageEnabled true

            proguardFile '../library-proguard/proguard-butterknife-7.pro'
            proguardFile '../library-proguard/proguard-crashlytics.pro'
            proguardFile '../library-proguard/proguard-facebook.pro'
            proguardFile '../library-proguard/proguard-facebook-conceal.pro'
            proguardFile '../library-proguard/proguard-google-analytics.pro'
            proguardFile '../library-proguard/proguard-google-play-services.pro'
            proguardFile '../library-proguard/proguard-gson.pro'
            proguardFile '../library-proguard/proguard-jackson-2.pro'
            proguardFile '../library-proguard/proguard-org-apache.pro'
            proguardFile '../library-proguard/proguard-square-okhttp3.pro'
            proguardFile '../library-proguard/proguard-square-retrofit2.pro'

            proguardFile 'merchant-debug-proguard.config'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, TRUE
            buildConfigField BOOLEAN, REPORT_CRASHES, FALSE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, TRUE
            buildConfigField BOOLEAN, ENABLE_SHARING, TRUE
            buildConfigField BOOLEAN, DEBUG_IMAGES, TRUE

            buildConfigField STRING, "NOQAPP_MOBILE", endpointSandbox
            buildConfigField STRING, "PROVIDER_AUTHORITY", providerAuthorityStaging
            buildConfigField STRING, "AWSS3", sandboxEndpointAwsS3
            buildConfigField STRING, "PROFILE_BUCKET", profileImageLocation
            buildConfigField STRING, "SERVICE_BUCKET", serviceImageLocation
            buildConfigField STRING, "MEDICAL_BUCKET", medicalImageLocation
            buildConfigField STRING, "ADVERTISEMENT_BUCKET", advertisementImageLocation
            buildConfigField STRING, "ACCREDITATION_BUCKET", accreditationImageLocation
            buildConfigField STRING, "MEDICAL_FORM_VERSION", medicalFormVersion
            buildConfigField STRING, "TOKEN_WITHOUT_USER_INFO", featureCreateTokenWithoutUserInfo
        }

        sandbox {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            matchingFallbacks = ['debug', 'release']

            testCoverageEnabled true

            proguardFile '../library-proguard/proguard-butterknife-7.pro'
            proguardFile '../library-proguard/proguard-crashlytics.pro'
            proguardFile '../library-proguard/proguard-facebook.pro'
            proguardFile '../library-proguard/proguard-facebook-conceal.pro'
            proguardFile '../library-proguard/proguard-google-analytics.pro'
            proguardFile '../library-proguard/proguard-google-play-services.pro'
            proguardFile '../library-proguard/proguard-gson.pro'
            proguardFile '../library-proguard/proguard-jackson-2.pro'
            proguardFile '../library-proguard/proguard-org-apache.pro'
            proguardFile '../library-proguard/proguard-square-okhttp3.pro'
            proguardFile '../library-proguard/proguard-square-retrofit2.pro'

            proguardFile 'merchant-release-proguard.config'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.sandbox

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE
            buildConfigField BOOLEAN, REPORT_CRASHES, TRUE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, FALSE
            buildConfigField BOOLEAN, ENABLE_SHARING, FALSE
            buildConfigField BOOLEAN, DEBUG_IMAGES, FALSE

            buildConfigField STRING, "NOQAPP_MOBILE", endpointSandbox
            buildConfigField STRING, "PROVIDER_AUTHORITY", providerAuthorityLive
            buildConfigField STRING, "AWSS3", sandboxEndpointAwsS3
            buildConfigField STRING, "PROFILE_BUCKET", profileImageLocation
            buildConfigField STRING, "SERVICE_BUCKET", serviceImageLocation
            buildConfigField STRING, "MEDICAL_BUCKET", medicalImageLocation
            buildConfigField STRING, "ADVERTISEMENT_BUCKET", advertisementImageLocation
            buildConfigField STRING, "ACCREDITATION_BUCKET", accreditationImageLocation
            buildConfigField STRING, "MEDICAL_FORM_VERSION", medicalFormVersion
            buildConfigField STRING, "TOKEN_WITHOUT_USER_INFO", featureCreateTokenWithoutUserInfo
        }

        release {
            debuggable false
            minifyEnabled true
            zipAlignEnabled true

            proguardFile '../library-proguard/proguard-butterknife-7.pro'
            proguardFile '../library-proguard/proguard-crashlytics.pro'
            proguardFile '../library-proguard/proguard-facebook.pro'
            proguardFile '../library-proguard/proguard-facebook-conceal.pro'
            proguardFile '../library-proguard/proguard-google-analytics.pro'
            proguardFile '../library-proguard/proguard-google-play-services.pro'
            proguardFile '../library-proguard/proguard-gson.pro'
            proguardFile '../library-proguard/proguard-jackson-2.pro'
            proguardFile '../library-proguard/proguard-org-apache.pro'
            proguardFile '../library-proguard/proguard-square-okhttp3.pro'
            proguardFile '../library-proguard/proguard-square-retrofit2.pro'

            proguardFile 'merchant-release-proguard.config'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release

            buildConfigField BOOLEAN, LOG_HTTP_REQUESTS, FALSE
            buildConfigField BOOLEAN, REPORT_CRASHES, TRUE
            buildConfigField BOOLEAN, ENABLE_VIEW_SERVER, FALSE
            buildConfigField BOOLEAN, ENABLE_SHARING, FALSE
            buildConfigField BOOLEAN, DEBUG_IMAGES, FALSE

            buildConfigField STRING, "NOQAPP_MOBILE", endpointLive
            buildConfigField STRING, "PROVIDER_AUTHORITY", providerAuthorityLive
            buildConfigField STRING, "AWSS3", releaseEndpointAwsS3
            buildConfigField STRING, "PROFILE_BUCKET", profileImageLocation
            buildConfigField STRING, "SERVICE_BUCKET", serviceImageLocation
            buildConfigField STRING, "MEDICAL_BUCKET", medicalImageLocation
            buildConfigField STRING, "ADVERTISEMENT_BUCKET", advertisementImageLocation
            buildConfigField STRING, "ACCREDITATION_BUCKET", accreditationImageLocation
            buildConfigField STRING, "MEDICAL_FORM_VERSION", medicalFormVersion
            buildConfigField STRING, "TOKEN_WITHOUT_USER_INFO", featureCreateTokenWithoutUserInfo
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions', 'TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        checkOnly 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout'
        textOutput 'stdout'
        // if true, generate an XML report for use by for example Jenkins
        xmlReport false
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")

        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds true
        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        ignore 'TypographyQuotes'
    }

    sourceSets {
        androidTest {
            java.srcDirs = ['test/java', 'androidTestDebug/java']
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                excludes = ['jdk.internal.*']
                includeNoLocationClasses = true
            }
        }

        unitTests.includeAndroidResources = true
        unitTests.returnDefaultValues = true

        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
    }

    flavorDimensions "version"

    productFlavors {
        healthcare {
            //select the dimension of flavor
            dimension "version"

            //configure applicationId for app published to Play store
            applicationId "com.noqapp.android.merchant.healthcare"

            //Configure this flavor specific app name published in Play Store
            resValue "string", "flavored_app_name", "NoQueue HealthCare"
            resValue "string", "content_provider", "com.noqapp.android.merchant.healthcare.fileprovider"
            buildConfigField "String", "APP_FLAVOR", "\"NQMH\""
        }

        queue {
            dimension "version"
            applicationId "com.noqapp.android.merchant"
            resValue "string", "flavored_app_name", "NoQueue Business"
            resValue "string", "content_provider", "com.noqapp.android.merchant.fileprovider"
            buildConfigField "String", "APP_FLAVOR", "\"NQMS\""
        }

        tv {
            dimension "version"
            applicationId "com.noqapp.android.merchant.tv"
            resValue "string", "flavored_app_name", "NoQueue TV"
            resValue "string", "content_provider", "com.noqapp.android.merchant.tv.fileprovider"
            buildConfigField "String", "APP_FLAVOR", "\"NQMT\""
        }

        inventory {
            dimension "version"
            applicationId "com.noqapp.android.merchant.inventory"
            resValue "string", "flavored_app_name", "NoQueue Inventory"
            resValue "string", "content_provider", "com.noqapp.android.merchant.inventory.fileprovider"
            buildConfigField "String", "APP_FLAVOR", "\"NQMI\""
        }
    }
}

//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
task jacocoTestReport(type: JacocoReport) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from = files([mainSrc])
    classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.mediarouter:mediarouter:1.2.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'com.google.firebase:firebase-core:17.5.1'
    implementation 'com.google.firebase:firebase-auth:19.4.0'
    implementation 'com.google.firebase:firebase-messaging:20.3.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'
    implementation 'com.google.firebase:firebase-analytics:17.6.0'
    implementation 'net.danlew:android.joda:2.10.9'
    implementation 'com.google.guava:guava:30.1-android'
    implementation 'androidx.cardview:cardview:1.0.0'

    implementation 'com.airbnb.android:lottie:3.6.1'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation 'org.apache.commons:commons-compress:1.20'
    implementation 'com.github.RobertApikyan:SegmentedControl:1.2.0'
    implementation 'com.google.android.gms:play-services-cast-framework:19.0.0'
    implementation 'info.hoang8f:android-segmented:1.0.6'
    implementation 'org.adw.library:discrete-seekbar:1.0.1'
    implementation 'com.google.android:flexbox:1.1.1'
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.itextpdf:itextg:5.5.10'
    implementation 'com.hbb20:ccp:2.3.1'
    implementation 'devs.mulham.horizontalcalendar:horizontalcalendar:1.3.4'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.lzyzsd:circleprogress:1.2.1'

    implementation project(':common')
    implementation project(':cashfreeSDK')
    implementation project(':calander_events')

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    androidTestImplementation('androidx.test.espresso:espresso-core:3.3.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestImplementation 'org.mockito:mockito-android:3.8.0'

    testImplementation 'org.mockito:mockito-core:3.8.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.1'

    // (Optional) If you need "Parameterized Tests"
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.1'

    // (Optional) If you also have JUnit 4-based tests
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.1'
    testImplementation 'org.awaitility:awaitility:4.0.3'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlin-android'

/** Gradle default task. */
defaultTasks 'clean', 'assembleDebug'
